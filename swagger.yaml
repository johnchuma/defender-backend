openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/JOHNVCHUMA/Defender/1.0.0
  - description: Defender APIs
    url: https://api.defendertz.com
info:
  description: This is a simple API for the Defender project
  version: "1.0.0"
  title: Defender API
  contact:
    email: support@defendertz.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: Operations available for users
  - name: blogs
    description: Operations available for blogs
  - name: subscribers
    description: Operations available for subscribers
  - name: inquiries
    description: Operations available for inquiries
  - name: Orders
    description: Operations available for orders
  - name: Stats
    description: Operations available for stats
  - name: Order Tracking
    description: Operations available for stats

paths:
  /order-tracking:
    post:
      summary: Add order tracking information
      tags:
        - Order Tracking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_uuid:
                  type: string
                  description: The UUID of the order being tracked.
                stage:
                  type: string
                  description: The current stage of the order tracking.
      responses:
        '201':
          description: Order tracking information added successfully
        '400':
          description: Bad Request
        '404':
          description: Order not found
        '500':
          description: Internal Server Error

  /order-tracking/order/{uuid}:
    get:
      summary: Retrieve order tracking information by order UUID
      tags:
        - Order Tracking
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the order to retrieve tracking information for.
      responses:
        '200':
          description: Order tracking information retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    uuid:
                      type: string
                      description: The UUID of the order tracking entry.
                    orderId:
                      type: string
                      description: The ID of the order being tracked.
                    stage:
                      type: string
                      description: The current stage of the order tracking.
                    createdAt:
                      type: string
                      format: date-time
                      description: Timestamp when the tracking entry was created.
                    updatedAt:
                      type: string
                      format: date-time
                      description: Timestamp when the tracking entry was last updated.
        '404':
          description: Order not found
        '500':
          description: Internal Server Error

  /order-tracking/{uuid}:
    patch:
      summary: Update order tracking information by UUID
      tags:
        - Order Tracking
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the order tracking entry to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stage:
                  type: string
                  description: The new stage of the order tracking.
      responses:
        '200':
          description: Order tracking information updated successfully
        '400':
          description: Bad Request
        '404':
          description: Order tracking entry not found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete order tracking information by UUID
      tags:
        - Order Tracking
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the order tracking entry to delete.
      responses:
        '204':
          description: Order tracking information deleted successfully
        '404':
          description: Order tracking entry not found
        '500':
          description: Internal Server Error
  /orders:
      post:
        summary: Create a new order
        tags:
          - Orders
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  withDelivery:
                    type: boolean
                    description: Indicates if the order is for delivery.
                  country:
                    type: string
                    description: The country for the delivery.
                  region:
                    type: string
                    description: The region for the delivery.
                  district:
                    type: string
                    description: The district for the delivery.
                  address:
                    type: string
                    description: The delivery address.
                  user_uuid:
                    type: string
                    description: The UUID of the user placing the order.
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product:
                          type: string
                          description: The name of the product.
                        count:
                          type: integer
                          description: The quantity of the product.
                        color:
                          type: string
                          description: The color of the product.
                        price:
                          type: number
                          format: float
                          description: The price of the product.
        responses:
          '201':
            description: Order created successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The ID of the created order.
          '400':
            description: Bad Request
          '500':
            description: Internal Server Error

      get:
        summary: Get active orders
        tags:
          - Orders
        parameters:
          - name: limit
            in: query
            required: false
            schema:
              type: integer
            description: Limit the number of orders returned.
          - name: offset
            in: query
            required: false
            schema:
              type: integer
            description: Offset for pagination.
          - name: keyword
            in: query
            required: false
            schema:
              type: string
            description: Keyword to filter orders by user name.
        responses:
          '200':
            description: A list of active orders
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    count:
                      type: integer
                      description: Total number of active orders.
                    page:
                      type: integer
                      description: Current page number.
                    orders:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: The ID of the order.
                          uuid:
                            type: string
                            description: The UUID of the order.
                          createdAt:
                            type: string
                            format: date-time
                            description: The date and time the order was created.
                          userId:
                            type: integer
                            description: The ID of the user who placed the order.
                          # Add other order fields as necessary
          '500':
            description: Internal Server Error

  /orders/user/{uuid}:
      get:
        summary: Get all orders for a specific user
        tags:
          - Orders
        parameters:
          - name: uuid
            in: path
            required: true
            schema:
              type: string
            description: The UUID of the user whose orders are to be retrieved.
        responses:
          '200':
            description: A list of orders for the specified user
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      uuid:
                        type: string
                        description: The UUID of the order.
                      totalPrice:
                        type: number
                        format: float
                        description: Total price of the order.
                      itemCount:
                        type: integer
                        description: Number of items in the order.
                      orderNo:
                        type: integer
                        description: Order number.
                      orderedAt:
                        type: string
                        format: date-time
                        description: The date and time the order was placed.
                      paymentStatus:
                        type: string
                        description: Payment status of the order.
                      deliverStatus:
                        type: string
                        description: Delivery status of the order.
          '404':
            description: User not found
          '500':
            description: Internal Server Error

  /orders/pending/user/{uuid}:
      get:
        summary: Get pending orders for a specific user
        tags:
          - Orders
        parameters:
          - name: uuid
            in: path
            required: true
            schema:
              type: string
            description: The UUID of the user whose pending orders are to be retrieved.
        responses:
          '200':
            description: A list of pending orders for the specified user
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      uuid:
                        type: string
                        description: The UUID of the order.
                      totalPrice:
                        type: number
                        format: float
                        description: Total price of the order.
                      itemCount:
                        type: integer
                        description: Number of items in the order.
                      orderNo:
                        type: integer
                        description: Order number.
                      orderedAt:
                        type: string
                        format: date-time
                        description: The date and time the order was placed.
                      paymentStatus:
                        type: string
                        description: Payment status of the order.
                      deliverStatus:
                        type: string
                        description: Delivery status of the order.
          '404':
            description: User not found
          '500':
            description: Internal Server Error

  /orders/delivered/user/{uuid}:
      get:
        summary: Get delivered orders for a specific user
        tags:
          - Orders
        parameters:
          - name: uuid
            in: path
            required: true
            schema:
              type: string
            description: The UUID of the user whose delivered orders are to be retrieved.
        responses:
          '200':
            description: A list of delivered orders for the specified user
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      uuid:
                        type: string
                        description: The UUID of the order.
                      totalPrice:
                        type: number
                        format: float
                        description: Total price of the order.
                      itemCount:
                        type: integer
                        description: Number of items in the order.
                      orderNo:
                        type: integer
                        description: Order number.
                      orderedAt:
                        type: string
                        format: date-time
                        description: The date and time the order was placed.
                      paymentStatus:
                        type: string
                        description: Payment status of the order.
                      deliverStatus:
                        type: string
                        description: Delivery status of the order.
          '404':
            description: User not found
          '500':
            description: Internal Server Error

  /orders/previous:
      get:
        summary: Get previous orders
        tags:
          - Orders
        parameters:
          - name: limit
            in: query
            required: false
            schema:
              type: integer
            description: Limit the number of previous orders returned.
          - name: offset
            in: query
            required: false
            schema:
              type: integer
            description: Offset for pagination.
        responses:
          '200':
            description: A list of previous orders
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    count:
                      type: integer
                      description: Total number of previous orders.
                    page:
                      type: integer
                      description: Current page number.
                    orders:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: The ID of the order.
                          uuid:
                            type: string
                            description: The UUID of the order.
                          createdAt:
                            type: string
                            format: date-time
                            description: The date and time the order was created.
                          userId:
                            type: integer
                            description: The ID of the user who placed the order.
                          # Add other order fields as necessary
          '500':
            description: Internal Server Error

  /orders/{uuid}:
    get:
      summary: Get a specific order by UUID
      tags:
        - Orders
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the order to retrieve.
      responses:
        '200':
          description: The order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    description: The UUID of the order.
                  totalPrice:
                    type: number
                    format: float
                    description: Total price of the order.
                  itemCount:
                    type: integer
                    description: Number of items in the order.
                  orderNo:
                    type: integer
                    description: Order number.
                  orderedAt:
                    type: string
                    format: date-time
                    description: The date and time the order was placed.
                  paymentStatus:
                    type: string
                    description: Payment status of the order.
                  deliverStatus:
                    type: string
                    description: Delivery status of the order.
        '404':
          description: Order not found
        '500':
          description: Internal Server Error

    put:
      summary: Update a specific order by UUID
      tags:
        - Orders
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the order to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                withDelivery:
                  type: boolean
                  description: Indicates if the order is for delivery.
                country:
                  type: string
                  description: The country for the delivery.
                region:
                  type: string
                  description: The region for the delivery.
                district:
                  type: string
                  description: The district for the delivery.
                address:
                  type: string
                  description: The delivery address.
                user_uuid:
                  type: string
                  description: The UUID of the user placing the order.
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        type: string
                        description: The name of the product.
                      count:
                        type: integer
                        description: The quantity of the product.
                      color:
                        type: string
                        description: The color of the product.
                      price:
                        type: number
                        format: float
                        description: The price of the product.
      responses:
        '200':
          description: Order updated successfully
        '400':
          description: Bad Request
        '404':
          description: Order not found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a specific order by UUID
      tags:
        - Orders
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the order to delete.
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found
        '500':
          description: Internal Server Error


  /users:
    post:
      summary: Register a new user
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  example: "admin"
                phone:
                  type: string
                  example: "+123456789"
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "jwt-token"
                      refreshToken:
                        type: string
                        example: "jwt-token"
        '401':
          description: User already exists

  /users/auth/login:
    post:
      summary: User login
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  body:
                    type: object
                    properties:
                      tokens:
                        type: object
                        properties:
                          accessToken:
                            type: string
                            example: "jwt-token"
                          refreshToken:
                            type: string
                            example: "jwt-token"
        '401':
          description: Wrong password
        '404':
          description: User not found

  /users/auth/google:
    post:
      summary: Login or register with Google
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john@example.com"
                name:
                  type: string
                  example: "John Doe"
      responses:
        '200':
          description: Successful login or registration via Google
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                        example: "jwt-token"
                      refreshToken:
                        type: string
                        example: "jwt-token"

  /users/auth/password-recovery:
    post:
      summary: Send recovery code for password reset
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john@example.com"
      responses:
        '200':
          description: Recovery code sent
        '404':
          description: User not found

  /users/auth/reset-password/{email}:
    post:
      summary: Reset password
      tags:
        - users
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
          example: "john@example.com"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recoveryCode:
                  type: string
                  example: "123456"
                password:
                  type: string
                  example: "newPassword123"
      responses:
        '200':
          description: Password reset successful
        '401':
          description: Invalid recovery code
        '404':
          description: User not found

  /users/info/{uuid}:
    get:
      summary: Get user info by UUID
      tags:
        - users
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          example: "uuid-1234"
      responses:
        '200':
          description: Successful retrieval of user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    type: string
                    example: "uuid-1234"
                  name:
                    type: string
                    example: "John Doe"
                  email:
                    type: string
                    example: "john@example.com"
                  phone:
                    type: string
                    example: "+123456789"
        '404':
          description: User not found

  /users/delete/{uuid}:
    delete:
      summary: Delete a user by UUID
      tags:
        - users
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          example: "uuid-1234"
      responses:
        '200':
          description: User successfully deleted
        '404':
          description: User not found

  /users/update/{uuid}:
    put:
      summary: Update a user by UUID
      tags:
        - users
      parameters:
        - in: path
          name: uuid
          schema:
            type: string
          required: true
          example: "uuid-1234"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  example: "john@example.com"
                phone:
                  type: string
                  example: "+123456789"
      responses:
        '200':
          description: User successfully updated
        '404':
          description: User not found

  /users/me:
    get:
      summary: Get my info
      tags:
        - users
      responses:
        '200':
          description: Successful retrieval of user info
        '404':
          description: User not found

  /subscribers:
    get:
      tags:
        - subscribers
      summary: Retrieve a list of subscribers
      operationId: getSubscribers
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            format: int32
            minimum: 1
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: A list of subscribers matching the criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscriber'
        '400':
          description: Bad input parameter

    post:
      tags:
        - subscribers
      summary: Add a new subscriber
      operationId: addSubscriber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber'
      responses:
        '201':
          description: Subscriber created successfully
        '403':
          description: Already Subscribed

  /blogs:
    get:
      summary: Retrieve a list of blogs
      tags:
        - blogs
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            format: int32
            minimum: 1
            example: 1
          description: Page number for pagination (default is 1)
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            example: 10
          description: Number of blogs to retrieve per page (default is 10)
      responses:
        '200':
          description: A paginated list of blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
 

    post:
      summary: Create a new blog
      tags:
        - blogs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '201':
          description: Blog created successfully

  /blogs/{uuid}:
    get:
      summary: Retrieve a blog by ID
      tags:
        - blogs
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of blog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '404':
          description: Blog not found

    put:
      summary: Update a blog by ID
      tags:
        - blogs
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '200':
          description: Blog updated successfully
        '404':
          description: Blog not found

    delete:
      summary: Delete a blog by ID
      tags:
        - blogs
      parameters:
        - in: path
          name: uuid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Blog deleted successfully
        '404':
          description: Blog not found
          
  /inquiries:
    get:
      tags:
        - inquiries
      summary: Retrieve a list of inquiries
      responses:
        '200':
          description: A list of inquiries
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Jane Doe"
                    email:
                      type: string
                      example: "jane@example.com"
                    message:
                      type: string
                      example: "I would like to know more about your services."
                    createdAt:
                      type: string
                      format: date-time
                      example: "2024-10-01T00:00:00Z"

    post:
      tags:
        - inquiries
      summary: Create a new inquiry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Jane Doe"
                email:
                  type: string
                  example: "jane@example.com"
                message:
                  type: string
                  example: "I would like to know more about your services."
      responses:
        '201':
          description: Inquiry created successfully
  
  /stats/user/{uuid}:
    get:
      summary: Get client order statistics
      description: Fetch the total orders, ordered items, delivered items, and total payments for a user by their UUID. Requires a valid JWT for authentication.
      tags:
        - Stats
      parameters:
        - name: uuid
          in: path
          required: true
          description: The UUID of the user
          schema:
            type: string
      responses:
        '200':
          description: Successfully fetched client statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalOrders:
                    type: integer
                    description: Total number of orders placed by the user
                  orderedItems:
                    type: integer
                    description: Total number of items ordered by the user
                  deliveredItems:
                    type: integer
                    description: Number of items delivered to the user
                  totalPayments:
                    type: number
                    description: Total amount paid by the user
        '401':
          description: Unauthorized - JWT token is missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized: Invalid token"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
components:
  schemas:
    Subscriber:
      type: object
      properties:
        email:
          type: string
          example: "john@example.com"
        name:
          type: string
          example: "John Doe"
        phone:
          type: string
          example: "+123456789"

    Blog:
      type: object
      properties:
        title:
          type: string
          example: "My First Blog"
        content:
          type: string
          example: "This is the content of the blog."
        author:
          type: string
          example: "John Doe"
        publishedDate:
          type: string
          format: date-time
          example: "2024-10-01T00:00:00Z"

    